openapi: 3.0.0
info:
  title: ToDoApp API
  version: 1.0.0
  description: API documentation for the ToDo application, showcasing endpoints for managing todos.
servers:
  - url: /
    description: Development server 
components:
  securitySchemes:
    cookieAuth: 
      type: apiKey
      in: cookie
      name: userIdCookie 
  schemas:
    Todo: 
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the todo item (MongoDB ObjectId)
          readOnly: true
        name:
          type: string
          description: Name of the todo task
        status:
          type: boolean
          description: Status of the todo task (true for completed, false for pending)
          default: false
        createdAt:
          type: string
          format: date-time
          description: Timestamp of when the todo item was created (ISO 8601 format)
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Timestamp of when the todo item was last updated (ISO 8601 format)
          readOnly: true
      required:
        - name
    TodoPayload: 
      type: object
      properties:
        name:
          type: string
          description: Name of the todo task
        status:
          type: boolean
          description: Status of the todo task (optional when creating, required for updates in some cases)
      required:
        - name
    Error: 
      type: object
      properties:
        message:
          type: string
          description: Error message
        errors: 
          type: array
          items:
            type: object
            properties:
              msg:
                type: string
                description: Validation error message
              param:
                type: string
                description: Parameter or field that caused the error
              location:
                type: string
                description: Location of the error (e.g., body, query, params)
paths:
  /todos:
    get:
      summary: Get all todos for the authenticated user
      security:
        - cookieAuth: [] 
      tags: 
        - Todos
      responses:
        '200':
          description: Successful response with a list of todos
          content:
            application/json:
              schema:
                type: object
                properties:
                  todos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo' 
        '401':
          description: Unauthorized - User authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new todo item
      security:
        - cookieAuth: [] 
      tags:
        - Todos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoPayload' 
      responses:
        '201':
          description: Todo item created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Todo added successfully
                  todo:
                    $ref: '#/components/schemas/Todo'
        '400':
          description: Bad request - Validation errors (e.g., missing name)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - User authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /todos/{id}:
    put:
      summary: Update an existing todo item by ID
      security:
        - cookieAuth: [] 
      tags:
        - Todos
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the todo item to update (MongoDB ObjectId)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoPayload' 
      responses:
        '200':
          description: Todo item updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Todo updated successfully
                  todo:
                    $ref: '#/components/schemas/Todo' 
        '400':
          description: Bad request - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - User authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Todo item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a todo item by ID
      security:
        - cookieAuth: [] 
      tags:
        - Todos
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the todo item to delete (MongoDB ObjectId)
          schema:
            type: string
      responses:
        '200':
          description: Todo item deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Todo deleted successfully
        '401':
          description: Unauthorized - User authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Todo item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
